<?php 

use Drupal\node\NodeInterface;
use Drupal\eventsreg\Utility\EventsRegPageMaker;

function eventsreg_preprocess_html(&$variables) {

  //$something = "We got this";
  //$variables['head_title']['title'] = $something;
  //dump($variables);
}

function eventsreg_preprocess_block(&$variables) {
  //dump($variables);

  //if ('page_title_block' == $variables['plugin_id']) {
  //	$something = "Set by Preprocess_block";
  //  $variables['content']['#title'] = $something;
  //}
}

function decodeAlias($alias){
	//$pieces = explode("/", substr($alias, 1));
	return str_replace("/", "-", substr($alias, 1));
}

function isMenu($menu) {
	//dpm($menu);
	return true;
}

/*
function getAcronymFromWebformNode($nid) {
	$acronym = "";

	$query = "SELECT webform_target_id FROM node__webform where entity_id = $nid";
	$result = db_query($query);
	$row = $result->fetchObject();
	$webform_id = $row->webform_target_id;
	$pieces = explode("_", $webform_id);
	$acronym = $pieces[0].'-'.$pieces[1];

	return $acronym;
}
*/

function eventsreg_preprocess_page(&$variables) {

	EventsRegPageMaker::setupPage($variables);
	//$variables['page']['#title'] = $variables['eventsreg']['title'];
	//dump($variables);

//$attachment = EventsRegPageMaker::setupPage($nid, \Drupal::routeMatch()->getRouteName());

}

function removeInternalFromUri($str) {

	return $str;
}

function getCurrentEventsLinks($nid) {
	$links = [];
	//
	//For now only 'administrator' get the link.
	//	
	//$uid = \Drupal::currentUser()->id();
    //$user = \Drupal::service('entity_type.manager')->getStorage('user')->load($uid);
    $roles = \Drupal::currentUser()->getRoles();
    if(in_array('administrator', $roles)) {
	  	//dump($roles);
		//Return Webform links for a $nid.
		$query = "SELECT nfr.field_results_title, nfr.field_results_uri ";
		$query .= "FROM node__field_results nfr where nfr.entity_id = $nid;";

		$result = db_query($query);

		for ($count = 0; $row = $result->fetchObject(); $count++) {
			$link = array('title' => $row->field_results_title,
						'url' => removeInternalFromUri($row->field_results_uri));
			array_push($links, $link);
		}
	}

	return $links;
}

function getCurrentEventsSites() {
	
	$query = "SELECT nfd.nid, nfd.title, nb.body_summary, nb.body_value, nfehl.field_event_home_link_uri, nfedt.field_event_date_time_value ";
	$query .= "FROM node_field_data nfd, node__body nb, node__field_event_home_link nfehl, node__field_event_date_time nfedt ";
	$query .= "where nfd.nid = nb.entity_id and nfd.nid = nfehl.entity_id and nfd.nid = nfedt.entity_id and nfd.status = 1 and nfd.type = 'event' "; 
	$query .= "order by nfedt.field_event_date_time_value desc;";
$query = "SELECT nfd.nid, nfd.title, nb.body_summary, nb.body_value, nfehl.field_event_home_link_uri, nfedt.field_event_date_time_value, nfea.field_event_active_value ";
$query .= "FROM node_field_data nfd, node__body nb, node__field_event_home_link nfehl, node__field_event_date_time nfedt, node__field_event_active nfea ";
$query .= "where nfd.nid = nb.entity_id and nfd.nid = nfehl.entity_id and nfd.nid = nfedt.entity_id and nfd.nid = nfea.entity_id and nfea.field_event_active_value = 1 and nfd.type = 'event' ";
$query .= "order by nfedt.field_event_date_time_value desc; ";

	//drupal_set_message($query);

	$result = db_query($query);

	$sites = [];
	for ($count = 0; $row = $result->fetchObject(); $count++) {
		$links = getCurrentEventsLinks($row->nid);
		$site = array('nid' => $row->nid,
					'acronym' => $row->title,
					'title' => $row->body_summary, 
					'description' => $row->body_value,
					'url' => removeInternalFromUri($row->field_event_home_link_uri),
					'event_date' => $row->field_event_date_time_value,
					'links' => $links);
		array_push($sites, $site);
	}
	//dpm(printr($sites, TRUE));


	//return $sites;
	return $sites;
}

function getCurrentEventsHTML() {
  //  Load and render a twig template
  $twig = \Drupal::service('twig');
  $sites = getCurrentEventsSites();
  //dump($test);

  //$config = \Drupal::config('webform.webform.icrp_website_survey');
  
  //drupal_set_message($config->get('open'));  //DateTime String if scheduled
  //drupal_set_message($config->get('close'));  //DateTime String if scheduled
  //drupal_set_message($config->get('status'));  //'open', 'closed', 'scheduled'

/*
  $reasons_data = getSurveyData('reasons');
  $background_data = getSurveyData('background');
  $familiarity_data = getSurveyData('familiarity');
  $region_data = getSurveyData('region');
  $helpful_data = getSurveyData('helpful');
  $feedback_data = getSurveyData('feedback');
*/
  /*
  $sites = [];
  $links = [];

  $link = array("title" => "Registrations", "url" => "/hello");
  array_push($links, $link);
  $link = array("title" => "Application", "url" => "/what/is/next");
  array_push($links, $link);

  $site = ["title" => "Title1", "description" => "This is a description area", 'links' => $links];
  array_push($sites, $site);

  $links = [];
  $site = ["title" => "Title2", "description" => "This is a second description area", 'links' => $links];
  array_push($sites, $site);

  //dump($sites);
  */
  $template = $twig->loadTemplate('modules/custom/eventsreg/templates/current.events.html.twig');
  $response = $template->render(['sites' => $sites]);

  return $response;
}